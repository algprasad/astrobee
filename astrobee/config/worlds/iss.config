-- Copyright (c) 2017, United States Government, as represented by the
-- Administrator of the National Aeronautics and Space Administration.
--
-- All rights reserved.
--
-- The Astrobee platform is licensed under the Apache License, Version 2.0
-- (the "License"); you may not use this file except in compliance with the
-- License. You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-- WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-- License for the specific language governing permissions and limitations
-- under the License.

local matrix = require 'matrix'
require "rotations"

--------------------------
--      DOCKING         --
--------------------------

-- Location of the dock and berth tilt values (in degrees)
world_dock_berth1_tilt = math.rad(0)    -- Tilt in body-frame Y
world_dock_berth2_tilt = math.rad(0)    -- Tilt in body-frame Y
world_dock_transform = transform(
    vec3(9.7, -9.79, 4.5), quat4(0.0, 0.0, 0.0, 1.0));

--------------------------
--      MOBILITY       --
--------------------------

-- Path to the file containing zones
world_zone_file = resolve_resource("zones/iss.bin")

--------------------------
--      LOCALIZATION    --
--------------------------

-- Sparse map
world_vision_map_filename = resolve_resource("maps/p4d.map")

-- AR Tag marker file
world_vision_ar_tag_filename = resolve_resource("granite_lab_markers.config")

--------------------------
--       PHYSICS        --
--------------------------

world_gravity_vector = vec3(0.0, 0.0, 0.0);

--------------------------
--       INERTIA        --
--------------------------

-- Inertial Parameters
--
world_inertia_name = "default";
world_inertia_com = vec3(0.0, 0.0, 0.0);              -- Center of mass
world_inertia_mass = 9.176;                           -- Platform + 4 batteries
world_inertia_matrix = matrix{{.1873, 0, 0},
                              {0, .1873, 0},
                              {0, 0, .1873}};         -- Inertia matrix

--------------------------
--     FLIGHT MODES     --
--------------------------

-- Initial and default flight mode
world_initial_flight_mode = "off";
world_default_flight_mode = "nominal";

-- All possible flight modes
world_flight_modes = {
  ---------
  -- OFF --
  ---------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "off";

    -- Control enabled
    control_enabled = false;

    -- Collision radius
    collision_radius = 0;

    -- Attitude Parameters
    att_kp = vec3(2.0, 2.0, 2.0); -- .4
    att_ki = vec3(0.001, 0.001, 0.001);
    omega_kd = vec3(1.6, 1.6, 1.6); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 0;

    -- Tolerances
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.2000;  -- 20 cm/s
    hard_limit_accel = 0.0200;  --  5 cm/s^2
    hard_limit_omega = 0.1745;  -- 10 deg/s (in rads/s)
    hard_limit_alpha = 0.1745;  -- 10 deg/s^2 (in rads/s^2)
  },
  -------------
  -- NOMINAL --
  -------------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "nominal";

    -- Control enabled
    control_enabled = true;

    -- Collision radius
    collision_radius = 0.25;

    -- Attitude Parameters
    att_kp = vec3(2.0, 2.0, 2.0); -- .4
    att_ki = vec3(0.001, 0.001, 0.001);
    omega_kd = vec3(1.6, 1.6, 1.6); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 3;

    -- Tolerances
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.2000;  -- 20 cm/s
    hard_limit_accel = 0.0200;  --  5 cm/s^2
    hard_limit_omega = 0.1745;  -- 10 deg/s (in rads/s)
    hard_limit_alpha = 0.1745;  -- 10 deg/s^2 (in rads/s^2)
  },
  ---------------
  -- DIFFICULT --
  ---------------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "difficult";

    -- Control enabled
    control_enabled = true;

    -- Collision radius
    collision_radius = 0.25;

    -- Attitude Parameters
    att_kp = vec3(2.0, 2.0, 2.0); -- .4
    att_ki = vec3(0.001, 0.001, 0.001);
    omega_kd = vec3(1.6, 1.6, 1.6); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 3;

    -- Tolerances
    tolerance_pos   = 0.2;                         -- Position (20 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.3490;                      -- Attitude (20 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.4000;  -- 40 cm/s
    hard_limit_accel = 0.0400;  --  8 cm/s^2
    hard_limit_omega = 0.5236;  -- 30 deg/s (in rads/s)
    hard_limit_alpha = 0.5236;  -- 30 deg/s^2 (in rads/s^2)
  },
  -----------
  -- QUIET --
  -----------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "quiet";

    -- Control enabled
    control_enabled = true;

    -- Collision radius
    collision_radius = 0.25;

    -- Attitude Parameters
    att_kp = vec3(2.0, 2.0, 2.0); -- .4
    att_ki = vec3(0.001, 0.001, 0.001);
    omega_kd = vec3(1.6, 1.6, 1.6); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 1;

    -- Tolerances
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.0200;  -- 2 mm/s
    hard_limit_accel = 0.0020;  -- 2 mm/s^2
    hard_limit_omega = 0.0174;  -- 1 deg/s (in rads/s)
    hard_limit_alpha = 0.0174;  -- 1 deg/s^2 (in rads/s^2)
  },
  -------------
  -- DOCKING --
  -------------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "docking";

    -- Control enabled
    control_enabled = true;

    -- Collision radius
    collision_radius = 0.25;

    -- Attitude Parameters
    att_kp = vec3(2.0, 2.0, 2.0); -- .4
    att_ki = vec3(0.001, 0.001, 0.001);
    omega_kd = vec3(1.6, 1.6, 1.6); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 3;

    -- Tolerances
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.0200;  -- 2 cm/s
    hard_limit_accel = 0.0100;  -- 1 cm/s^2
    hard_limit_omega = 0.1745;  -- 10 deg/s (in rads/s)
    hard_limit_alpha = 0.1745;  -- 10 deg/s^2 (in rads/s^2)
  },
  ---------------
  -- UNDOCKING --
  ---------------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "undocking";

    -- Control enabled
    control_enabled = true;

    -- Collision radius
    collision_radius = 0.25;

    -- Attitude Parameters
    att_kp = vec3(2.0, 2.0, 2.0); -- .4
    att_ki = vec3(0.001, 0.001, 0.001);
    omega_kd = vec3(1.6, 1.6, 1.6); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 3;

    -- Tolerances
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.2000;  -- 20 cm/s
    hard_limit_accel = 0.0200;  --  5 cm/s^2
    hard_limit_omega = 0.1745;  -- 10 deg/s (in rads/s)
    hard_limit_alpha = 0.1745;  -- 10 deg/s^2 (in rads/s^2)
  },
  --------------
  -- PERCHING --
  --------------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "perching";

    -- Control enabled
    control_enabled = true;

    -- Collision radius
    collision_radius = 0.25;

    -- Attitude Parameters
    att_kp = vec3(2.0, 2.0, 2.0); -- .4
    att_ki = vec3(0.001, 0.001, 0.001);
    omega_kd = vec3(1.6, 1.6, 1.6); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 3;

    -- Tolerances
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.2000;  -- 20 cm/s
    hard_limit_accel = 0.0200;  --  5 cm/s^2
    hard_limit_omega = 0.1745;  -- 10 deg/s (in rads/s)
    hard_limit_alpha = 0.1745;  -- 10 deg/s^2 (in rads/s^2)
  },
  ----------------
  -- UNPERCHING --
  ----------------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "unperching";

    -- Control enabled
    control_enabled = true;

    -- Collision radius
    collision_radius = 0.25;

    -- Attitude Parameters
    att_kp = vec3(2.0, 2.0, 2.0); -- .4
    att_ki = vec3(0.001, 0.001, 0.001);
    omega_kd = vec3(1.6, 1.6, 1.6); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 3;

    -- Tolerances
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.2000;  -- 20 cm/s
    hard_limit_accel = 0.0200;  --  5 cm/s^2
    hard_limit_omega = 0.1745;  -- 10 deg/s (in rads/s)
    hard_limit_alpha = 0.1745;  -- 10 deg/s^2 (in rads/s^2)
  }
}

--------------------------
--       VISUALEYEZ     --
--------------------------

-- Visualeyez not available
world_visualeyez_grounding = {}
world_visualeyez_targets = {}
world_visualeyez_calibration = ""


--------------------------
--     VIVE     --
--------------------------

world_vive_force2d = false
world_vive_lighthouses = {}
